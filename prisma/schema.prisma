// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model code {
  code  String @id @unique @db.VarChar(48) // 激活码作为唯一标识
  times Int // 使用次数
}

model user {
  user_id Int    @id @default(autoincrement()) // 用户ID
  finger  String @db.VarChar(100) // 用户指纹
}

model Player {
  id              Int       @id @default(autoincrement())
  qqId            String    @unique
  nickname        String
  level           Int       @default(1)
  exp             Int       @default(0)
  mood            Int       @default(100)
  energy          Int       @default(5)
  currentLocation Int
  isTraveling     Boolean   @default(false)
  travelStartTime DateTime?
  createdAt       DateTime  @default(now())

  items             PlayerItem[]
  friends           Friendship[]             @relation("PlayerFriends")
  friendOf          Friendship[]             @relation("FriendFriends")
  unlockedLocations PlayerUnlockedLocation[]
  travels           PlayerTravel[]
  PlayerTrait       PlayerTrait[]
  PlayerSpecialItem PlayerSpecialItem[]
  PlayerAchievement PlayerAchievement[]
}

model PlayerUnlockedLocation {
  id         Int      @id @default(autoincrement())
  playerId   Int
  locationId Int
  player     Player   @relation(fields: [playerId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])
}

model Edge {
  id        Int      @id @default(autoincrement())
  fromId    Int
  toId      Int
  distance  Int // 距离或消耗
  eventRate Float // 事件概率
  isActive  Boolean  @default(true)
  from      Location @relation("FromLocation", fields: [fromId], references: [id])
  to        Location @relation("ToLocation", fields: [toId], references: [id])
}

model Location {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  unlockLevel Int
  isActive    Boolean @default(true)
  fromEdges   Edge[]  @relation("FromLocation")
  toEdges     Edge[]  @relation("ToLocation")

  items           Item[]
  unlockedBy      PlayerUnlockedLocation[]
  mapEndLocations MapEndLocation[]
  travelPaths     TravelPath[]
}

model Item {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  rarity      String
  locationId  Int
  category    String

  location    Location     @relation(fields: [locationId], references: [id])
  playerItems PlayerItem[]
}

model PlayerItem {
  id         Int      @id @default(autoincrement())
  playerId   Int
  itemId     Int
  quantity   Int      @default(1)
  obtainedAt DateTime @default(now())

  player Player @relation(fields: [playerId], references: [id])
  item   Item   @relation(fields: [itemId], references: [id])
}

model Friendship {
  id        Int      @id @default(autoincrement())
  playerId  Int
  friendId  Int
  createdAt DateTime @default(now())

  player Player @relation("PlayerFriends", fields: [playerId], references: [id])
  friend Player @relation("FriendFriends", fields: [friendId], references: [id])
}

model Trait {
  id           Int           @id @default(autoincrement())
  name         String
  description  String
  // 可扩展更多字段，如类型、数值等
  playerTraits PlayerTrait[]
}

model PlayerTrait {
  id         Int      @id @default(autoincrement())
  playerId   Int
  traitId    Int
  obtainedAt DateTime @default(now())

  player Player @relation(fields: [playerId], references: [id])
  trait  Trait  @relation(fields: [traitId], references: [id])
}

model SpecialItem {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String
  // 可扩展更多字段，如类型、用途等
  playerSpecialItems PlayerSpecialItem[]
}

model PlayerSpecialItem {
  id            Int      @id @default(autoincrement())
  playerId      Int
  specialItemId Int
  quantity      Int      @default(1)
  obtainedAt    DateTime @default(now())

  player      Player      @relation(fields: [playerId], references: [id])
  specialItem SpecialItem @relation(fields: [specialItemId], references: [id])
}

model Achievement {
  id                 Int                 @id @default(autoincrement())
  name               String
  description        String
  // 可扩展更多字段，如达成条件、奖励等
  playerAchievements PlayerAchievement[]
}

model PlayerAchievement {
  id            Int      @id @default(autoincrement())
  playerId      Int
  achievementId Int
  completedAt   DateTime @default(now())

  player      Player      @relation(fields: [playerId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])
}

model Map {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  startLocationId Int
  isActive        Boolean          @default(true)
  playerTravels   PlayerTravel[]
  endLocations    MapEndLocation[]
}

model MapEndLocation {
  id         Int      @id @default(autoincrement())
  mapId      Int
  locationId Int
  weight     Int      @default(1) // 权重，用于随机选择
  map        Map      @relation(fields: [mapId], references: [id])
  location   Location @relation(fields: [locationId], references: [id])
}

model PlayerTravel {
  id               Int          @id @default(autoincrement())
  playerId         Int
  mapId            Int
  startLocationId  Int
  endLocationId    Int
  currentPathIndex Int // 当前在路径中的位置索引
  progress         Float // 当前路段的进度 0-1
  startTime        DateTime     @default(now())
  lastUpdateTime   DateTime     @default(now())
  isActive         Boolean      @default(true)
  player           Player       @relation(fields: [playerId], references: [id])
  map              Map          @relation(fields: [mapId], references: [id])
  path             TravelPath[]
}

model TravelPath {
  id         Int          @id @default(autoincrement())
  travelId   Int
  locationId Int
  pathIndex  Int // 在路径中的顺序
  travel     PlayerTravel @relation(fields: [travelId], references: [id])
  location   Location     @relation(fields: [locationId], references: [id])
}
